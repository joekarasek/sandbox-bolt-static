(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~bolt-video"],{

/***/ "./node_modules/@bolt/components-video/src/video.standalone.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@bolt/components-video/src/video.standalone.js ***!
  \*********************************************************************/
/*! exports provided: default, BoltVideo, BoltVideoMeta */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoltVideo\", function() { return BoltVideo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoltVideoMeta\", function() { return BoltVideoMeta; });\n/* harmony import */ var _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bolt/core/utils */ \"./node_modules/@bolt/core/utils/index.js\");\n/* harmony import */ var _bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bolt/core/renderers */ \"./node_modules/@bolt/core/renderers/index.js\");\n/* harmony import */ var dasherize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dasherize */ \"./node_modules/dasherize/index.js\");\n/* harmony import */ var dasherize__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dasherize__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var mousetrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mousetrap */ \"./node_modules/mousetrap/mousetrap.js\");\n/* harmony import */ var mousetrap__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(mousetrap__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _polymer_polymer_lib_utils_render_status_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @polymer/polymer/lib/utils/render-status.js */ \"./node_modules/@polymer/polymer/lib/utils/render-status.js\");\nvar _class, _class2, _temp, _class3, _class4, _temp2;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n // Bolt v2.0 will be shipping with this in Bolt core -- manually adding this in to the Bolt video player as a temp workaround till then.\n\n\nvar index = 0;\n\nvar BoltVideoMeta = Object(_bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"define\"])(_class = (_temp = _class2 =\n/*#__PURE__*/\nfunction (_withPreact) {\n  _inherits(BoltVideoMeta, _withPreact);\n\n  function BoltVideoMeta(self) {\n    var _this;\n\n    _classCallCheck(this, BoltVideoMeta);\n\n    self = _this = _possibleConstructorReturn(this, _getPrototypeOf(BoltVideoMeta).call(this, self));\n    return _possibleConstructorReturn(_this, self);\n  }\n\n  _createClass(BoltVideoMeta, [{\n    key: \"render\",\n    value: function render() {\n      // All of its logic is contained here in render(), but it could be updated to be a property that is set\n      // externally (such as when the video has finished fully loading).\n      // [Mai] 'reveal' allows the meta data (title and duration) to be hidden.\n      var reveal = Boolean(this.title || this.duration);\n      return Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"div\", {\n        className: \"c-\".concat(\"bolt\", \"-video-meta\")\n      }, reveal ? Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"div\", {\n        className: \"c-\".concat(\"bolt\", \"-video-meta__wrapper\")\n      }, this.title ? Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"div\", {\n        className: \"c-\".concat(\"bolt\", \"-video-meta__item c-\").concat(\"bolt\", \"-video-meta__item--title\")\n      }, this.title) : null, Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"div\", {\n        className: \"c-\".concat(\"bolt\", \"-video-meta__item c-\").concat(\"bolt\", \"-video-meta__item--duration\")\n      }, this.duration)) : null);\n    }\n  }, {\n    key: \"renderRoot\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return BoltVideoMeta;\n}(Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"withPreact\"])()), _class2.is = \"\".concat(\"bolt\", \"-video-meta\"), _class2.props = {\n  duration: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].string,\n  title: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].string\n}, _temp)) || _class;\n\nvar BoltVideo = Object(_bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"define\"])(_class3 = (_temp2 = _class4 =\n/*#__PURE__*/\nfunction (_withPreact2) {\n  _inherits(BoltVideo, _withPreact2);\n\n  function BoltVideo(self) {\n    var _this2;\n\n    _classCallCheck(this, BoltVideo);\n\n    self = _this2 = _possibleConstructorReturn(this, _getPrototypeOf(BoltVideo).call(this, self));\n    index += 1;\n    _this2.onPlay = _this2.onPlay.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.onPause = _this2.onPause.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.onEnded = _this2.onEnded.bind(_assertThisInitialized(_assertThisInitialized(_this2))); // this.onProgress = this.onProgress.bind(this);\n\n    _this2.onDurationChange = _this2.onDurationChange.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.onSeeked = _this2.onSeeked.bind(_assertThisInitialized(_assertThisInitialized(_this2))); // This binding is necessary to make `this` work in the callback\n\n    _this2.handleClose = _this2.handleClose.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.collapseOnClickAway = _this2.collapseOnClickAway.bind(_assertThisInitialized(_assertThisInitialized(_this2))); // BoltVideo.globalErrors.forEach(this.props.onError);\n\n    _this2.defaultProps = {\n      // width: 320,\n      // height: 180,\n      // playerId: \"default\",\n      // onError: () => { },\n      // onPlay: () => { },\n      // onPause: () => { },\n      // onFinish: () => { },\n      // onProgress: () => { },\n      // onDuration: () => { },\n      loop: false,\n      autoplay: false,\n      hideFullScreenButton: false,\n      directToFullscreen: false,\n      resetOnFinish: false\n    }; // Ensure that 'this' inside the _onWindowResize event handler refers to <bolt-nav-link>\n    // even if the handler is attached to another element (window in this case)\n\n    _this2._onWindowResize = _this2._onWindowResize.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    return _possibleConstructorReturn(_this2, self);\n  }\n\n  _createClass(BoltVideo, [{\n    key: \"_setMetaTitle\",\n    // Called to check whether or not the component should call\n    // updated(), much like React's shouldComponentUpdate().\n    // updating(props, state) {\n    //   console.log(props);\n    //   console.log(state);\n    // }\n    value: function _setMetaTitle(title) {\n      if (this.props.showMeta && this.props.showMetaTitle) {\n        this.querySelector(\"\".concat(\"bolt\", \"-video-meta\")).setAttribute('title', title);\n      }\n    }\n  }, {\n    key: \"_setMetaDuration\",\n    value: function _setMetaDuration(seconds) {\n      if (this.props.showMeta) {\n        var durationFormatted = BoltVideo._formatDuration(seconds);\n\n        this.querySelector(\"\".concat(\"bolt\", \"-video-meta\")).setAttribute('duration', durationFormatted);\n      }\n    }\n  }, {\n    key: \"_setVideoDimensions\",\n    value: function _setVideoDimensions(width, height) {\n      this.srcWidth = width;\n      this.srcHeight = height;\n    }\n  }, {\n    key: \"handleClose\",\n    // static isBackgroundVideo() {\n    //   return this.props.isBackgroundVideo;\n    // }\n    value: function handleClose() {\n      this.close();\n    }\n  }, {\n    key: \"connecting\",\n    value: function connecting() {\n      var _this3 = this;\n\n      this.state = {\n        // IDs can't start with numbers so adding the \"v\" prefix to prevent JS errors\n        id: \"v\".concat(this.props.videoId, \"-\").concat(this.props.accountId, \"-\").concat(index),\n        // errors: BoltVideo.globalErrors !== undefined  ? [].concat(BoltVideo.globalErrors) : [],\n        isPlaying: 'paused',\n        isFinished: false,\n        progress: 0\n      };\n\n      if (this.props.isBackgroundVideo) {\n        this._calculateIdealVideoSize();\n      }\n\n      if (this.defaultProps) {\n        var defaultProps = this.defaultProps;\n\n        for (var propName in defaultProps) {\n          if (this.props[propName] === undefined) {\n            this.props[propName] = defaultProps[propName];\n          }\n        }\n      }\n\n      if (BoltVideo.globalErrors !== undefined && BoltVideo.globalErrors.length) {\n        // console.log('adding default errors');\n        // console.log(this.state.errors);\n        this.state.errors = [].concat(BoltVideo.globalErrors);\n      } else {\n        this.state.errors = [];\n      }\n\n      if (this.state.errors.length) {\n        // console.log(this.state.errors);\n        // console.log('error length');\n        return;\n      } // only ever append script once\n\n\n      if (!BoltVideo.players) {\n        BoltVideo.players = [];\n        var s = this.createScript();\n\n        s.onload = function () {\n          BoltVideo.players.forEach(function (player) {\n            player.initVideoJS(player.state.id);\n          });\n        }; // handle script not loading\n\n\n        s.onerror = function (err) {\n          var uriErr = {\n            code: '',\n            message: \"The script \".concat(err.target.src, \" is not accessible.\")\n          };\n          BoltVideo.globalErrors.push(uriErr);\n\n          _this3.props.onError(uriErr);\n        };\n\n        BoltVideo.appendScript(s);\n      }\n\n      this.init(); // If onInit event exists on element, run that instead of auto initializing\n\n      if (this.props.onInit) {\n        if (window[this.props.onInit]) {\n          window[this.props.onInit](this);\n        }\n      } // If our video can expand/collapse we add the collapse listener and \"close on escape\" behavior\n\n\n      if (this.props.isBackgroundVideo) {\n        window.addEventListener('resize', this._onWindowResize);\n        mousetrap__WEBPACK_IMPORTED_MODULE_3___default.a.bind('esc', this.handleClose, 'keyup');\n        document.addEventListener('click', this.collapseOnClickAway);\n      }\n    }\n  }, {\n    key: \"_onWindowResize\",\n    value: function _onWindowResize(event) {\n      this._calculateIdealVideoSize();\n    } // If we click outside the video wrapper div collapse the video\n\n  }, {\n    key: \"collapseOnClickAway\",\n    value: function collapseOnClickAway(event) {\n      var videoWrapper = this.querySelector('.c-bolt-video--background');\n\n      if (!videoWrapper.contains(event.target)) {// @todo: debug why videos don't autoplay when this is enabled\n        // this.close();\n      }\n    } // shouldUpdate(props, state) {\n    //   return true;\n    // }\n    // Called when props have been set regardless of if they've changed.\n    // updating(props) { }\n\n    /**\n     * `attributeChangedCallback` processes changes to the `expanded` attribute.\n     */\n    // attributeChangedCallback(attributeName, oldValue, newValue) {\n    //   console.log(attributeName);\n    //   // `expanded` is a boolean attribute it is either set or not set. The\n    //   // actual value is irrelevant.\n    //   // const value = this.hasAttribute('expanded');\n    //   // this._shadowButton.setAttribute('aria-expanded', value);\n    // }\n\n  }, {\n    key: \"disconnecting\",\n    value: function disconnecting() {\n      if (this.props.isBackgroundVideo) {\n        window.removeEventListener('optimizedResize', this._onWindowResize);\n      }\n\n      if (this.player) {\n        this.player.dispose();\n      }\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(player) {\n      this.props.onError(player.error());\n    }\n  }, {\n    key: \"onPlay\",\n    value: function onPlay(player) {\n      this.classList.add('is-playing');\n      this.classList.remove('is-finished');\n      this.classList.remove('is-paused'); // @TODO: implement internal setState method\n      // elem.setState({\n      //   isPlaying: true,\n      //   progress: BoltVideo.getCurrentTimeMs(player),\n      //   isFinished: false\n      // });\n      // Dispatch an event that signals a request to expand to the\n      // `<howto-accordion>` element.\n\n      this.state.isPlaying = true;\n      this.state.progress = BoltVideo.getCurrentTimeMs(player);\n      this.state.isFinished = false;\n      this.dispatchEvent(new CustomEvent('playing', {\n        detail: {\n          isBackgroundVideo: this.props.isBackgroundVideo\n        },\n        bubbles: true\n      }));\n    }\n  }, {\n    key: \"onPause\",\n    value: function onPause(player) {\n      var progress = BoltVideo.getCurrentTimeMs(player);\n      this.classList.add('is-paused');\n      this.classList.remove('is-playing'); // @TODO: implement internal setState method\n      // this.setState({\n      //   isPlaying: false,\n      //   progress\n      // });\n\n      this.state.isPlaying = false;\n      this.state.progress = progress;\n      this.dispatchEvent(new CustomEvent('pause', {\n        detail: {\n          isBackgroundVideo: this.props.isBackgroundVideo\n        },\n        bubbles: true\n      }));\n    }\n  }, {\n    key: \"onSeeked\",\n    value: function onSeeked(player) {\n      var progress = BoltVideo.getCurrentTimeMs(player); // @TODO: implement internal setState method\n      // this.setState({\n      //   progress: BoltVideo.getCurrentTimeMs(player),\n      //   isFinished: false\n      // });\n\n      this.state.isFinished = false;\n      this.state.progress = progress;\n    }\n  }, {\n    key: \"onDurationChange\",\n    value: function onDurationChange(player) {\n      var duration = BoltVideo.getDurationMs(player); // @TODO: implement internal setState method\n      // this.setState({ duration: BoltVideo.getDurationMs(player) });\n\n      this.state.duration = duration;\n    }\n  }, {\n    key: \"onEnded\",\n    value: function onEnded() {\n      var _this4 = this;\n\n      // calling syncronously here inteferes with player and causes errors to be thrown\n      setTimeout(function () {\n        _this4.state.isFinished = true;\n\n        _this4.classList.add('is-finished');\n\n        _this4.classList.remove('is-paused');\n\n        _this4.dispatchEvent(new CustomEvent('ended', {\n          detail: {\n            isBackgroundVideo: _this4.props.isBackgroundVideo\n          },\n          bubbles: true\n        })); // this.setState({ isFinished: true });\n\n      }, 0);\n    }\n  }, {\n    key: \"_calculateIdealVideoSize\",\n    value: function _calculateIdealVideoSize() {\n      this.expandedHeight = this.getBoundingClientRect().height;\n    }\n  }, {\n    key: \"setPlayer\",\n    value: function setPlayer(player) {\n      this.player = player;\n    }\n  }, {\n    key: \"createScript\",\n    value: function createScript() {\n      var s = document.createElement('script');\n      s.src = BoltVideo.getScriptUrl(this.props.accountId, this.props.playerId);\n      s.async = true;\n      return s;\n    }\n  }, {\n    key: \"initVideoJS\",\n    value: function initVideoJS(id) {\n      var self = this;\n      Object(_polymer_polymer_lib_utils_render_status_js__WEBPACK_IMPORTED_MODULE_4__[\"beforeNextRender\"])(this, function () {\n        var player = videojs(id);\n        var handler = BoltVideo.handlePlayerReady.bind(player, self);\n        player.ready(handler);\n      });\n    }\n  }, {\n    key: \"initVideo\",\n    value: function initVideo(id) {\n      var self = this;\n      Object(_polymer_polymer_lib_utils_render_status_js__WEBPACK_IMPORTED_MODULE_4__[\"beforeNextRender\"])(this, function () {\n        bc(self.querySelector(\"#\".concat(id)), {\n          controlBar: {\n            fullscreenToggle: !self.props.hideFullScreenButton\n          }\n        });\n        self.initVideoJS(id);\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var self = this;\n      Object(_polymer_polymer_lib_utils_render_status_js__WEBPACK_IMPORTED_MODULE_4__[\"beforeNextRender\"])(this, function () {\n        if (window.bc && window.videojs) {\n          self.initVideo(self.state.id);\n        } else {\n          BoltVideo.players.push(self);\n        }\n      });\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      if (this.player) {\n        this.player.play();\n      } else {\n        this.earlyPlay = true;\n        this.dispatchEvent(new CustomEvent('playing', {\n          detail: {\n            isBackgroundVideo: this.props.isBackgroundVideo\n          },\n          bubbles: true\n        }));\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.pause();\n      this.dispatchEvent(new CustomEvent('close', {\n        detail: {\n          isBackgroundVideo: this.props.isBackgroundVideo\n        },\n        bubbles: true\n      }));\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.player) {\n        if (this.state.isPlaying === false || this.state.isPlaying === 'paused') {\n          this.play();\n        } else {\n          this.pause();\n        }\n      } else {\n        this.earlyToggle = true;\n        this.dispatchEvent(new CustomEvent('playing', {\n          detail: {\n            isBackgroundVideo: this.props.isBackgroundVideo\n          },\n          bubbles: true\n        }));\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.player) {\n        this.player.pause();\n      } else {\n        this.earlyPause = true;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(_ref) {\n      var state = _ref.state,\n          props = _ref.props;\n\n      // console.log('render callback');\n      // data-email-subject=\"Pega - Intelligent Virtual Assistant for Email\"\n      // data-email-body=\"Check out this video from Pega\"\n      // data-email-videourl=\"https://local.d8.pega.com/insights/resources/intelligent-virtual-assistant-email\"\n      // const playIconEmoji = () => (\n      //   <span role=\"img\" aria-label=\"play-video\">\n      //     ▶️\n      //   </span>\n      // );\n\n      /* eslint jsx-a11y/media-has-caption: \"off\" */\n      // Added a wrapping div as brightcove adds siblings to the video tag\n      // Loop through any extra (unknown) data attributes on the main element; copy over to the <video> tag being rendered\n      function datasetToObject(elem) {\n        var data = {};\n        [].forEach.call(elem.attributes, function (attr) {\n          if (/^data-/.test(attr.name)) {\n            data[dasherize__WEBPACK_IMPORTED_MODULE_2___default()(attr.name)] = attr.value;\n          }\n        });\n        return data;\n      }\n\n      var dataAttributes = datasetToObject(this);\n      var closeButtonText = null;\n\n      if (this.props.closeButtonText) {\n        closeButtonText = this.props.closeButtonText;\n      } else {\n        closeButtonText = 'Close';\n      }\n\n      var classes = Object(_bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(\"c-\".concat(\"bolt\", \"-video\"), this.props.controls === false ? \"c-\".concat(\"bolt\", \"-video--hide-controls\") : '', this.props.isBackgroundVideo ? \"c-\".concat(\"bolt\", \"-video--background\") : '');\n      var videoMetaTag = \"\".concat(\"bolt\", \"-video-meta\");\n      return Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"span\", {\n        className: classes\n      }, Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"video\", _extends({}, dataAttributes, {\n        id: this.state.id\n      }, this.props.poster ? {\n        poster: this.props.poster.uri\n      } : {}, {\n        \"data-embed\": \"default\",\n        \"data-video-id\": this.props.videoId,\n        preload: \"none\",\n        \"data-account\": this.props.accountId,\n        \"data-player\": this.props.playerId // playIcon={playIconEmoji()}\n        // following 'autoplay' can not expected to always work on web\n        // see: https://docs.brightcove.com/en/player/brightcove-player/guides/in-page-embed-player-implementation.html\n        ,\n        autoPlay: this.props.autoplay,\n        \"data-application-id\": true,\n        loop: this.props.loop,\n        className: \"video-js\",\n        controls: this.props.controls === false ? false : true\n      })), this.props.showMeta && Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(videoMetaTag), this.props.isBackgroundVideo && Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"a\", {\n        className: Object(_bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"css\"])(\"c-\".concat(\"bolt\", \"-video__close-button\"), \"c-\".concat(\"bolt\", \"-video__close-button--icon-to-text\")),\n        href: \"javascript:\",\n        onClick: this.handleClose\n      }, Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"span\", {\n        className: \"c-\".concat(\"bolt\", \"-video__close-button-icon\")\n      }, Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"div\", {\n        class: \"c-bolt-button c-bolt-button--xsmall c-bolt-button--secondary c-bolt-button--rounded c-bolt-button--icon-only\"\n      }, Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"span\", {\n        class: \"c-bolt-button__icon\"\n      }, Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"bolt-icon\", {\n        name: \"close\",\n        size: \"small\"\n      })))), Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"h\"])(\"span\", {\n        className: \"c-\".concat(\"bolt\", \"-video__close-button-text\")\n      }, closeButtonText)));\n    }\n  }, {\n    key: \"renderRoot\",\n    get: function get() {\n      return this;\n    }\n  }, {\n    key: \"expandedHeight\",\n    get: function get() {\n      return this.getAttribute('expandedHeight');\n    }\n    /**\n     * Properties and their corresponding attributes should mirror one another.\n     * To this effect, the property setter for `expanded` handles truthy/falsy\n     * values and reflects those to the state of the attribute. It’s important\n     * to note that there are no side effects taking place in the property\n     * setter. For example, the setter does not set `aria-expanded`. Instead,\n     * that work happens in the `attributeChangedCallback`. As a general rule,\n     * make property setters very dumb, and if setting a property or attribute\n     * should cause a side effect (like setting a corresponding ARIA attribute)\n     * do that work in the `attributeChangedCallback`. This will avoid having to\n     * manage complex attribute/property reentrancy scenarios.\n     */\n    ,\n    set: function set(value) {\n      // Properties can be set to all kinds of string values. This makes sure\n      // it’s converted to a proper boolean value using JavaScript’s truthiness\n      // & falsiness principles.\n      // value = Boolean(value);\n      if (value) {\n        this.setAttribute('expandedHeight', value);\n      } else {\n        this.removeAttribute('expandedHeight');\n      }\n\n      this.dispatchEvent(new CustomEvent('videoExpandedHeightSet', {\n        detail: {\n          expandedHeight: this.expandedHeight\n        },\n        bubbles: true\n      }));\n    }\n  }], [{\n    key: \"_formatDuration\",\n    value: function _formatDuration(seconds) {\n      var mm = Math.floor(seconds / 60) || 0;\n      var ss = ('0' + Math.floor(seconds % 60)).slice(-2);\n      return mm + ':' + ss;\n    }\n  }, {\n    key: \"handlePlayerReady\",\n    value: function handlePlayerReady(context) {\n      var player = this;\n      var elem = context;\n      elem.setPlayer(player); // If the option to show controls is set to false (meaning, no controls will be shown), make sure the video is also muted.\n\n      if (elem.controls === false) {\n        elem.player.muted(true);\n      }\n\n      player.on('loadedmetadata', function () {\n        var duration = player.mediainfo.duration;\n        var title = player.mediainfo.name;\n        var width = player.mediainfo.sources[1].width;\n        var height = player.mediainfo.sources[1].height;\n\n        elem._setMetaTitle(title);\n\n        elem._setMetaDuration(duration);\n\n        elem._setVideoDimensions(width, height);\n\n        if (this.earlyToggle) {\n          this.earlyToggle = false;\n          this.toggle();\n        } else if (this.earlyPlay) {\n          this.earlyPlay = false;\n          this.play();\n        } else if (this.earlyPause) {\n          this.earlyPause = false;\n          this.pause();\n        }\n      });\n      player.on('play', function () {\n        elem.onPlay(player);\n      });\n      player.on('pause', function () {\n        elem.onPause(player);\n      });\n      player.on('seeked', function () {\n        elem.onSeeked(player);\n      });\n      player.on('timeupdate', function () {// elem.onPlay(player);\n      });\n      player.on('durationchange', function () {\n        elem.onDurationChange(player);\n      });\n      player.on('ended', function () {\n        elem.onEnded(player);\n      }); // this.contextmenu({ disabled: true });\n    }\n  }, {\n    key: \"appendScript\",\n    value: function appendScript(s) {\n      document.body.appendChild(s);\n    }\n  }, {\n    key: \"getScriptUrl\",\n    value: function getScriptUrl(accountId, playerId) {\n      return \"//players.brightcove.net/\".concat(accountId, \"/\").concat(playerId, \"_default/index.min.js\");\n    }\n  }, {\n    key: \"getCurrentTimeMs\",\n    value: function getCurrentTimeMs(player) {\n      return Math.round(player.currentTime() * 1000);\n    }\n  }, {\n    key: \"getDurationMs\",\n    value: function getDurationMs(player) {\n      return Math.round(player.duration() * 1000);\n    }\n  }]);\n\n  return BoltVideo;\n}(Object(_bolt_core_renderers__WEBPACK_IMPORTED_MODULE_1__[\"withPreact\"])()), _class4.is = \"\".concat(\"bolt\", \"-video\"), _class4.props = {\n  videoId: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].string,\n  accountId: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].string,\n  playerId: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].string,\n  poster: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].object,\n  isBackgroundVideo: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].boolean,\n  onInit: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].string,\n  showMeta: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].boolean,\n  showMetaTitle: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].boolean,\n  closeButtonText: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].string,\n  loop: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].boolean,\n  // onError: null,\n  // onPlay: null,\n  // onPause: null,\n  // onFinish: null,\n  // onProgress: null,\n  // onDuration: null,\n  controls: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].boolean,\n  autoplay: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].boolean,\n  resetOnFinish: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].boolean,\n  directToFullscreen: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].boolean,\n  hideFullScreenButton: _bolt_core_utils__WEBPACK_IMPORTED_MODULE_0__[\"props\"].boolean\n}, _temp2)) || _class3;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (BoltVideo);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@bolt/components-video/src/video.standalone.js\n");

/***/ }),

/***/ "./node_modules/dasherize/index.js":
/*!*****************************************!*\
  !*** ./node_modules/dasherize/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isArray = Array.isArray || function (obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nvar isDate = function isDate(obj) {\n  return Object.prototype.toString.call(obj) === '[object Date]';\n};\n\nvar isRegex = function isRegex(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar has = Object.prototype.hasOwnProperty;\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n};\n\nfunction dashCase(str) {\n  return str.replace(/[A-Z](?:(?=[^A-Z])|[A-Z]*(?=[A-Z][^A-Z]|$))/g, function (s, i) {\n    return (i > 0 ? '-' : '') + s.toLowerCase();\n  });\n}\n\nfunction map(xs, f) {\n  if (xs.map) {\n    return xs.map(f);\n  }\n\n  var res = [];\n\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n\n  return res;\n}\n\nfunction reduce(xs, f, acc) {\n  if (xs.reduce) {\n    return xs.reduce(f, acc);\n  }\n\n  for (var i = 0; i < xs.length; i++) {\n    acc = f(acc, xs[i], i);\n  }\n\n  return acc;\n}\n\nfunction walk(obj) {\n  if (!obj || _typeof(obj) !== 'object') {\n    return obj;\n  }\n\n  if (isDate(obj) || isRegex(obj)) {\n    return obj;\n  }\n\n  if (isArray(obj)) {\n    return map(obj, walk);\n  }\n\n  return reduce(objectKeys(obj), function (acc, key) {\n    var camel = dashCase(key);\n    acc[camel] = walk(obj[key]);\n    return acc;\n  }, {});\n}\n\nmodule.exports = function (obj) {\n  if (typeof obj === 'string') {\n    return dashCase(obj);\n  }\n\n  return walk(obj);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGFzaGVyaXplL2luZGV4LmpzP2Q5YzQiXSwibmFtZXMiOlsiaXNBcnJheSIsIkFycmF5Iiwib2JqIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiaXNEYXRlIiwiaXNSZWdleCIsImhhcyIsImhhc093blByb3BlcnR5Iiwib2JqZWN0S2V5cyIsImtleXMiLCJrZXkiLCJwdXNoIiwiZGFzaENhc2UiLCJzdHIiLCJyZXBsYWNlIiwicyIsImkiLCJ0b0xvd2VyQ2FzZSIsIm1hcCIsInhzIiwiZiIsInJlcyIsImxlbmd0aCIsInJlZHVjZSIsImFjYyIsIndhbGsiLCJjYW1lbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOzs7O0FBRWIsSUFBSUEsT0FBTyxHQUFHQyxLQUFLLENBQUNELE9BQU4sSUFBaUIsVUFBVUUsR0FBVixFQUFlO0FBQzVDLFNBQU9DLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCSixHQUEvQixNQUF3QyxnQkFBL0M7QUFDRCxDQUZEOztBQUlBLElBQUlLLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVVMLEdBQVYsRUFBZTtBQUMxQixTQUFPQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkosR0FBL0IsTUFBd0MsZUFBL0M7QUFDRCxDQUZEOztBQUlBLElBQUlNLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVVOLEdBQVYsRUFBZTtBQUMzQixTQUFPQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkosR0FBL0IsTUFBd0MsaUJBQS9DO0FBQ0QsQ0FGRDs7QUFJQSxJQUFJTyxHQUFHLEdBQUdOLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQk0sY0FBM0I7O0FBQ0EsSUFBSUMsVUFBVSxHQUFHUixNQUFNLENBQUNTLElBQVAsSUFBZSxVQUFVVixHQUFWLEVBQWU7QUFDN0MsTUFBSVUsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsT0FBSyxJQUFJQyxHQUFULElBQWdCWCxHQUFoQixFQUFxQjtBQUNuQixRQUFJTyxHQUFHLENBQUNILElBQUosQ0FBU0osR0FBVCxFQUFjVyxHQUFkLENBQUosRUFBd0I7QUFDdEJELFVBQUksQ0FBQ0UsSUFBTCxDQUFVRCxHQUFWO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPRCxJQUFQO0FBQ0QsQ0FSRDs7QUFVQSxTQUFTRyxRQUFULENBQWtCQyxHQUFsQixFQUF1QjtBQUNyQixTQUFPQSxHQUFHLENBQUNDLE9BQUosQ0FBWSw4Q0FBWixFQUE0RCxVQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0I7QUFDakYsV0FBTyxDQUFDQSxDQUFDLEdBQUcsQ0FBSixHQUFRLEdBQVIsR0FBYyxFQUFmLElBQXFCRCxDQUFDLENBQUNFLFdBQUYsRUFBNUI7QUFDRCxHQUZNLENBQVA7QUFHRDs7QUFFRCxTQUFTQyxHQUFULENBQWFDLEVBQWIsRUFBaUJDLENBQWpCLEVBQW9CO0FBQ2xCLE1BQUlELEVBQUUsQ0FBQ0QsR0FBUCxFQUFZO0FBQ1YsV0FBT0MsRUFBRSxDQUFDRCxHQUFILENBQU9FLENBQVAsQ0FBUDtBQUNEOztBQUNELE1BQUlDLEdBQUcsR0FBRyxFQUFWOztBQUNBLE9BQUssSUFBSUwsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0csRUFBRSxDQUFDRyxNQUF2QixFQUErQk4sQ0FBQyxFQUFoQyxFQUFvQztBQUNsQ0ssT0FBRyxDQUFDVixJQUFKLENBQVNTLENBQUMsQ0FBQ0QsRUFBRSxDQUFDSCxDQUFELENBQUgsRUFBUUEsQ0FBUixDQUFWO0FBQ0Q7O0FBQ0QsU0FBT0ssR0FBUDtBQUNEOztBQUVELFNBQVNFLE1BQVQsQ0FBZ0JKLEVBQWhCLEVBQW9CQyxDQUFwQixFQUF1QkksR0FBdkIsRUFBNEI7QUFDMUIsTUFBSUwsRUFBRSxDQUFDSSxNQUFQLEVBQWU7QUFDYixXQUFPSixFQUFFLENBQUNJLE1BQUgsQ0FBVUgsQ0FBVixFQUFhSSxHQUFiLENBQVA7QUFDRDs7QUFDRCxPQUFLLElBQUlSLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdHLEVBQUUsQ0FBQ0csTUFBdkIsRUFBK0JOLENBQUMsRUFBaEMsRUFBb0M7QUFDbENRLE9BQUcsR0FBR0osQ0FBQyxDQUFDSSxHQUFELEVBQU1MLEVBQUUsQ0FBQ0gsQ0FBRCxDQUFSLEVBQWFBLENBQWIsQ0FBUDtBQUNEOztBQUNELFNBQU9RLEdBQVA7QUFDRDs7QUFFRCxTQUFTQyxJQUFULENBQWMxQixHQUFkLEVBQW1CO0FBQ2pCLE1BQUksQ0FBQ0EsR0FBRCxJQUFRLFFBQU9BLEdBQVAsTUFBZSxRQUEzQixFQUFxQztBQUNuQyxXQUFPQSxHQUFQO0FBQ0Q7O0FBQ0QsTUFBSUssTUFBTSxDQUFDTCxHQUFELENBQU4sSUFBZU0sT0FBTyxDQUFDTixHQUFELENBQTFCLEVBQWlDO0FBQy9CLFdBQU9BLEdBQVA7QUFDRDs7QUFDRCxNQUFJRixPQUFPLENBQUNFLEdBQUQsQ0FBWCxFQUFrQjtBQUNoQixXQUFPbUIsR0FBRyxDQUFDbkIsR0FBRCxFQUFNMEIsSUFBTixDQUFWO0FBQ0Q7O0FBQ0QsU0FBT0YsTUFBTSxDQUFDZixVQUFVLENBQUNULEdBQUQsQ0FBWCxFQUFrQixVQUFVeUIsR0FBVixFQUFlZCxHQUFmLEVBQW9CO0FBQ2pELFFBQUlnQixLQUFLLEdBQUdkLFFBQVEsQ0FBQ0YsR0FBRCxDQUFwQjtBQUNBYyxPQUFHLENBQUNFLEtBQUQsQ0FBSCxHQUFhRCxJQUFJLENBQUMxQixHQUFHLENBQUNXLEdBQUQsQ0FBSixDQUFqQjtBQUNBLFdBQU9jLEdBQVA7QUFDRCxHQUpZLEVBSVYsRUFKVSxDQUFiO0FBS0Q7O0FBRURHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVN0IsR0FBVixFQUFlO0FBQzlCLE1BQUksT0FBT0EsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQzNCLFdBQU9hLFFBQVEsQ0FBQ2IsR0FBRCxDQUFmO0FBQ0Q7O0FBQ0QsU0FBTzBCLElBQUksQ0FBQzFCLEdBQUQsQ0FBWDtBQUNELENBTEQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGFzaGVyaXplL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaXNEYXRlID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IERhdGVdJztcbn07XG5cbnZhciBpc1JlZ2V4ID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufTtcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ga2V5cztcbn07XG5cbmZ1bmN0aW9uIGRhc2hDYXNlKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tBLVpdKD86KD89W15BLVpdKXxbQS1aXSooPz1bQS1aXVteQS1aXXwkKSkvZywgZnVuY3Rpb24gKHMsIGkpIHtcbiAgICByZXR1cm4gKGkgPiAwID8gJy0nIDogJycpICsgcy50b0xvd2VyQ2FzZSgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFwKHhzLCBmKSB7XG4gIGlmICh4cy5tYXApIHtcbiAgICByZXR1cm4geHMubWFwKGYpO1xuICB9XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIHJlcy5wdXNoKGYoeHNbaV0sIGkpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiByZWR1Y2UoeHMsIGYsIGFjYykge1xuICBpZiAoeHMucmVkdWNlKSB7XG4gICAgcmV0dXJuIHhzLnJlZHVjZShmLCBhY2MpO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICBhY2MgPSBmKGFjYywgeHNbaV0sIGkpO1xuICB9XG4gIHJldHVybiBhY2M7XG59XG5cbmZ1bmN0aW9uIHdhbGsob2JqKSB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICBpZiAoaXNEYXRlKG9iaikgfHwgaXNSZWdleChvYmopKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG1hcChvYmosIHdhbGspO1xuICB9XG4gIHJldHVybiByZWR1Y2Uob2JqZWN0S2V5cyhvYmopLCBmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICB2YXIgY2FtZWwgPSBkYXNoQ2FzZShrZXkpO1xuICAgIGFjY1tjYW1lbF0gPSB3YWxrKG9ialtrZXldKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZGFzaENhc2Uob2JqKTtcbiAgfVxuICByZXR1cm4gd2FsayhvYmopO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/dasherize/index.js\n");

/***/ }),

/***/ "./node_modules/mousetrap/mousetrap.js":
/*!*********************************************!*\
  !*** ./node_modules/mousetrap/mousetrap.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*global define:false */\n\n/**\n * Copyright 2012-2017 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.6.2\n * @url craig.is/killing/mice\n */\n(function (window, document, undefined) {\n  // Check if mousetrap is used inside browser, if not, return\n  if (!window) {\n    return;\n  }\n  /**\n   * mapping of special keycodes to their corresponding keys\n   *\n   * everything in this dictionary cannot use keypress events\n   * so it has to be here to map to the correct keycodes for\n   * keyup/keydown events\n   *\n   * @type {Object}\n   */\n\n\n  var _MAP = {\n    8: 'backspace',\n    9: 'tab',\n    13: 'enter',\n    16: 'shift',\n    17: 'ctrl',\n    18: 'alt',\n    20: 'capslock',\n    27: 'esc',\n    32: 'space',\n    33: 'pageup',\n    34: 'pagedown',\n    35: 'end',\n    36: 'home',\n    37: 'left',\n    38: 'up',\n    39: 'right',\n    40: 'down',\n    45: 'ins',\n    46: 'del',\n    91: 'meta',\n    93: 'meta',\n    224: 'meta'\n  };\n  /**\n   * mapping for special characters so they can support\n   *\n   * this dictionary is only used incase you want to bind a\n   * keyup or keydown event to one of these keys\n   *\n   * @type {Object}\n   */\n\n  var _KEYCODE_MAP = {\n    106: '*',\n    107: '+',\n    109: '-',\n    110: '.',\n    111: '/',\n    186: ';',\n    187: '=',\n    188: ',',\n    189: '-',\n    190: '.',\n    191: '/',\n    192: '`',\n    219: '[',\n    220: '\\\\',\n    221: ']',\n    222: '\\''\n  };\n  /**\n   * this is a mapping of keys that require shift on a US keypad\n   * back to the non shift equivelents\n   *\n   * this is so you can use keyup events with these keys\n   *\n   * note that this will only work reliably on US keyboards\n   *\n   * @type {Object}\n   */\n\n  var _SHIFT_MAP = {\n    '~': '`',\n    '!': '1',\n    '@': '2',\n    '#': '3',\n    '$': '4',\n    '%': '5',\n    '^': '6',\n    '&': '7',\n    '*': '8',\n    '(': '9',\n    ')': '0',\n    '_': '-',\n    '+': '=',\n    ':': ';',\n    '\\\"': '\\'',\n    '<': ',',\n    '>': '.',\n    '?': '/',\n    '|': '\\\\'\n  };\n  /**\n   * this is a list of special strings you can use to map\n   * to modifier keys when you specify your keyboard shortcuts\n   *\n   * @type {Object}\n   */\n\n  var _SPECIAL_ALIASES = {\n    'option': 'alt',\n    'command': 'meta',\n    'return': 'enter',\n    'escape': 'esc',\n    'plus': '+',\n    'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n  };\n  /**\n   * variable to store the flipped version of _MAP from above\n   * needed to check if we should use keypress or not when no action\n   * is specified\n   *\n   * @type {Object|undefined}\n   */\n\n  var _REVERSE_MAP;\n  /**\n   * loop through the f keys, f1 to f19 and add them to the map\n   * programatically\n   */\n\n\n  for (var i = 1; i < 20; ++i) {\n    _MAP[111 + i] = 'f' + i;\n  }\n  /**\n   * loop through to map numbers on the numeric keypad\n   */\n\n\n  for (i = 0; i <= 9; ++i) {\n    // This needs to use a string cause otherwise since 0 is falsey\n    // mousetrap will never fire for numpad 0 pressed as part of a keydown\n    // event.\n    //\n    // @see https://github.com/ccampbell/mousetrap/pull/258\n    _MAP[i + 96] = i.toString();\n  }\n  /**\n   * cross browser add event method\n   *\n   * @param {Element|HTMLDocument} object\n   * @param {string} type\n   * @param {Function} callback\n   * @returns void\n   */\n\n\n  function _addEvent(object, type, callback) {\n    if (object.addEventListener) {\n      object.addEventListener(type, callback, false);\n      return;\n    }\n\n    object.attachEvent('on' + type, callback);\n  }\n  /**\n   * takes the event and returns the key character\n   *\n   * @param {Event} e\n   * @return {string}\n   */\n\n\n  function _characterFromEvent(e) {\n    // for keypress events we should return the character as is\n    if (e.type == 'keypress') {\n      var character = String.fromCharCode(e.which); // if the shift key is not pressed then it is safe to assume\n      // that we want the character to be lowercase.  this means if\n      // you accidentally have caps lock on then your key bindings\n      // will continue to work\n      //\n      // the only side effect that might not be desired is if you\n      // bind something like 'A' cause you want to trigger an\n      // event when capital A is pressed caps lock will no longer\n      // trigger the event.  shift+a will though.\n\n      if (!e.shiftKey) {\n        character = character.toLowerCase();\n      }\n\n      return character;\n    } // for non keypress events the special maps are needed\n\n\n    if (_MAP[e.which]) {\n      return _MAP[e.which];\n    }\n\n    if (_KEYCODE_MAP[e.which]) {\n      return _KEYCODE_MAP[e.which];\n    } // if it is not in the special map\n    // with keydown and keyup events the character seems to always\n    // come in as an uppercase character whether you are pressing shift\n    // or not.  we should make sure it is always lowercase for comparisons\n\n\n    return String.fromCharCode(e.which).toLowerCase();\n  }\n  /**\n   * checks if two arrays are equal\n   *\n   * @param {Array} modifiers1\n   * @param {Array} modifiers2\n   * @returns {boolean}\n   */\n\n\n  function _modifiersMatch(modifiers1, modifiers2) {\n    return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n  }\n  /**\n   * takes a key event and figures out what the modifiers are\n   *\n   * @param {Event} e\n   * @returns {Array}\n   */\n\n\n  function _eventModifiers(e) {\n    var modifiers = [];\n\n    if (e.shiftKey) {\n      modifiers.push('shift');\n    }\n\n    if (e.altKey) {\n      modifiers.push('alt');\n    }\n\n    if (e.ctrlKey) {\n      modifiers.push('ctrl');\n    }\n\n    if (e.metaKey) {\n      modifiers.push('meta');\n    }\n\n    return modifiers;\n  }\n  /**\n   * prevents default for this event\n   *\n   * @param {Event} e\n   * @returns void\n   */\n\n\n  function _preventDefault(e) {\n    if (e.preventDefault) {\n      e.preventDefault();\n      return;\n    }\n\n    e.returnValue = false;\n  }\n  /**\n   * stops propogation for this event\n   *\n   * @param {Event} e\n   * @returns void\n   */\n\n\n  function _stopPropagation(e) {\n    if (e.stopPropagation) {\n      e.stopPropagation();\n      return;\n    }\n\n    e.cancelBubble = true;\n  }\n  /**\n   * determines if the keycode specified is a modifier key or not\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n\n\n  function _isModifier(key) {\n    return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n  }\n  /**\n   * reverses the map lookup so that we can look for specific keys\n   * to see what can and can't use keypress\n   *\n   * @return {Object}\n   */\n\n\n  function _getReverseMap() {\n    if (!_REVERSE_MAP) {\n      _REVERSE_MAP = {};\n\n      for (var key in _MAP) {\n        // pull out the numeric keypad from here cause keypress should\n        // be able to detect the keys from the character\n        if (key > 95 && key < 112) {\n          continue;\n        }\n\n        if (_MAP.hasOwnProperty(key)) {\n          _REVERSE_MAP[_MAP[key]] = key;\n        }\n      }\n    }\n\n    return _REVERSE_MAP;\n  }\n  /**\n   * picks the best action based on the key combination\n   *\n   * @param {string} key - character for key\n   * @param {Array} modifiers\n   * @param {string=} action passed in\n   */\n\n\n  function _pickBestAction(key, modifiers, action) {\n    // if no action was picked in we should try to pick the one\n    // that we think would work best for this key\n    if (!action) {\n      action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n    } // modifier keys don't work as expected with keypress,\n    // switch to keydown\n\n\n    if (action == 'keypress' && modifiers.length) {\n      action = 'keydown';\n    }\n\n    return action;\n  }\n  /**\n   * Converts from a string key combination to an array\n   *\n   * @param  {string} combination like \"command+shift+l\"\n   * @return {Array}\n   */\n\n\n  function _keysFromString(combination) {\n    if (combination === '+') {\n      return ['+'];\n    }\n\n    combination = combination.replace(/\\+{2}/g, '+plus');\n    return combination.split('+');\n  }\n  /**\n   * Gets info for a specific key combination\n   *\n   * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n   * @param  {string=} action\n   * @returns {Object}\n   */\n\n\n  function _getKeyInfo(combination, action) {\n    var keys;\n    var key;\n    var i;\n    var modifiers = []; // take the keys from this pattern and figure out what the actual\n    // pattern is all about\n\n    keys = _keysFromString(combination);\n\n    for (i = 0; i < keys.length; ++i) {\n      key = keys[i]; // normalize key names\n\n      if (_SPECIAL_ALIASES[key]) {\n        key = _SPECIAL_ALIASES[key];\n      } // if this is not a keypress event then we should\n      // be smart about using shift keys\n      // this will only work for US keyboards however\n\n\n      if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n        key = _SHIFT_MAP[key];\n        modifiers.push('shift');\n      } // if this key is a modifier then add it to the list of modifiers\n\n\n      if (_isModifier(key)) {\n        modifiers.push(key);\n      }\n    } // depending on what the key combination is\n    // we will try to pick the best event for it\n\n\n    action = _pickBestAction(key, modifiers, action);\n    return {\n      key: key,\n      modifiers: modifiers,\n      action: action\n    };\n  }\n\n  function _belongsTo(element, ancestor) {\n    if (element === null || element === document) {\n      return false;\n    }\n\n    if (element === ancestor) {\n      return true;\n    }\n\n    return _belongsTo(element.parentNode, ancestor);\n  }\n\n  function Mousetrap(targetElement) {\n    var self = this;\n    targetElement = targetElement || document;\n\n    if (!(self instanceof Mousetrap)) {\n      return new Mousetrap(targetElement);\n    }\n    /**\n     * element to attach key events to\n     *\n     * @type {Element}\n     */\n\n\n    self.target = targetElement;\n    /**\n     * a list of all the callbacks setup via Mousetrap.bind()\n     *\n     * @type {Object}\n     */\n\n    self._callbacks = {};\n    /**\n     * direct map of string combinations to callbacks used for trigger()\n     *\n     * @type {Object}\n     */\n\n    self._directMap = {};\n    /**\n     * keeps track of what level each sequence is at since multiple\n     * sequences can start out with the same sequence\n     *\n     * @type {Object}\n     */\n\n    var _sequenceLevels = {};\n    /**\n     * variable to store the setTimeout call\n     *\n     * @type {null|number}\n     */\n\n    var _resetTimer;\n    /**\n     * temporary state where we will ignore the next keyup\n     *\n     * @type {boolean|string}\n     */\n\n\n    var _ignoreNextKeyup = false;\n    /**\n     * temporary state where we will ignore the next keypress\n     *\n     * @type {boolean}\n     */\n\n    var _ignoreNextKeypress = false;\n    /**\n     * are we currently inside of a sequence?\n     * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n     *\n     * @type {boolean|string}\n     */\n\n    var _nextExpectedAction = false;\n    /**\n     * resets all sequence counters except for the ones passed in\n     *\n     * @param {Object} doNotReset\n     * @returns void\n     */\n\n    function _resetSequences(doNotReset) {\n      doNotReset = doNotReset || {};\n      var activeSequences = false,\n          key;\n\n      for (key in _sequenceLevels) {\n        if (doNotReset[key]) {\n          activeSequences = true;\n          continue;\n        }\n\n        _sequenceLevels[key] = 0;\n      }\n\n      if (!activeSequences) {\n        _nextExpectedAction = false;\n      }\n    }\n    /**\n     * finds all callbacks that match based on the keycode, modifiers,\n     * and action\n     *\n     * @param {string} character\n     * @param {Array} modifiers\n     * @param {Event|Object} e\n     * @param {string=} sequenceName - name of the sequence we are looking for\n     * @param {string=} combination\n     * @param {number=} level\n     * @returns {Array}\n     */\n\n\n    function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n      var i;\n      var callback;\n      var matches = [];\n      var action = e.type; // if there are no events related to this keycode\n\n      if (!self._callbacks[character]) {\n        return [];\n      } // if a modifier key is coming up on its own we should allow it\n\n\n      if (action == 'keyup' && _isModifier(character)) {\n        modifiers = [character];\n      } // loop through all callbacks for the key that was pressed\n      // and see if any of them match\n\n\n      for (i = 0; i < self._callbacks[character].length; ++i) {\n        callback = self._callbacks[character][i]; // if a sequence name is not specified, but this is a sequence at\n        // the wrong level then move onto the next match\n\n        if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n          continue;\n        } // if the action we are looking for doesn't match the action we got\n        // then we should keep going\n\n\n        if (action != callback.action) {\n          continue;\n        } // if this is a keypress event and the meta key and control key\n        // are not pressed that means that we need to only look at the\n        // character, otherwise check the modifiers as well\n        //\n        // chrome will not fire a keypress if meta or control is down\n        // safari will fire a keypress if meta or meta+shift is down\n        // firefox will fire a keypress if meta or control is down\n\n\n        if (action == 'keypress' && !e.metaKey && !e.ctrlKey || _modifiersMatch(modifiers, callback.modifiers)) {\n          // when you bind a combination or sequence a second time it\n          // should overwrite the first one.  if a sequenceName or\n          // combination is specified in this call it does just that\n          //\n          // @todo make deleting its own method?\n          var deleteCombo = !sequenceName && callback.combo == combination;\n          var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n\n          if (deleteCombo || deleteSequence) {\n            self._callbacks[character].splice(i, 1);\n          }\n\n          matches.push(callback);\n        }\n      }\n\n      return matches;\n    }\n    /**\n     * actually calls the callback function\n     *\n     * if your callback function returns false this will use the jquery\n     * convention - prevent default and stop propogation on the event\n     *\n     * @param {Function} callback\n     * @param {Event} e\n     * @returns void\n     */\n\n\n    function _fireCallback(callback, e, combo, sequence) {\n      // if this event should not happen stop here\n      if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n        return;\n      }\n\n      if (callback(e, combo) === false) {\n        _preventDefault(e);\n\n        _stopPropagation(e);\n      }\n    }\n    /**\n     * handles a character key event\n     *\n     * @param {string} character\n     * @param {Array} modifiers\n     * @param {Event} e\n     * @returns void\n     */\n\n\n    self._handleKey = function (character, modifiers, e) {\n      var callbacks = _getMatches(character, modifiers, e);\n\n      var i;\n      var doNotReset = {};\n      var maxLevel = 0;\n      var processedSequenceCallback = false; // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n\n      for (i = 0; i < callbacks.length; ++i) {\n        if (callbacks[i].seq) {\n          maxLevel = Math.max(maxLevel, callbacks[i].level);\n        }\n      } // loop through matching callbacks for this key event\n\n\n      for (i = 0; i < callbacks.length; ++i) {\n        // fire for all sequence callbacks\n        // this is because if for example you have multiple sequences\n        // bound such as \"g i\" and \"g t\" they both need to fire the\n        // callback for matching g cause otherwise you can only ever\n        // match the first one\n        if (callbacks[i].seq) {\n          // only fire callbacks for the maxLevel to prevent\n          // subsequences from also firing\n          //\n          // for example 'a option b' should not cause 'option b' to fire\n          // even though 'option b' is part of the other sequence\n          //\n          // any sequences that do not match here will be discarded\n          // below by the _resetSequences call\n          if (callbacks[i].level != maxLevel) {\n            continue;\n          }\n\n          processedSequenceCallback = true; // keep a list of which sequences were matches for later\n\n          doNotReset[callbacks[i].seq] = 1;\n\n          _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n\n          continue;\n        } // if there were no sequence matches but we are still here\n        // that means this is a regular match so we should fire that\n\n\n        if (!processedSequenceCallback) {\n          _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n        }\n      } // if the key you pressed matches the type of sequence without\n      // being a modifier (ie \"keyup\" or \"keypress\") then we should\n      // reset all sequences that were not matched by this event\n      //\n      // this is so, for example, if you have the sequence \"h a t\" and you\n      // type \"h e a r t\" it does not match.  in this case the \"e\" will\n      // cause the sequence to reset\n      //\n      // modifier keys are ignored because you can have a sequence\n      // that contains modifiers such as \"enter ctrl+space\" and in most\n      // cases the modifier key will be pressed before the next key\n      //\n      // also if you have a sequence such as \"ctrl+b a\" then pressing the\n      // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n      //\n      // the \"keydown\" is expected when there is a modifier, but the\n      // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n      // after and that causes the sequence to reset\n      //\n      // we ignore keypresses in a sequence that directly follow a keydown\n      // for the same character\n\n\n      var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n\n      if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n        _resetSequences(doNotReset);\n      }\n\n      _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n    };\n    /**\n     * handles a keydown event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n\n\n    function _handleKeyEvent(e) {\n      // normalize e.which for key events\n      // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n      if (typeof e.which !== 'number') {\n        e.which = e.keyCode;\n      }\n\n      var character = _characterFromEvent(e); // no character found then stop\n\n\n      if (!character) {\n        return;\n      } // need to use === for the character check because the character can be 0\n\n\n      if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n        _ignoreNextKeyup = false;\n        return;\n      }\n\n      self.handleKey(character, _eventModifiers(e), e);\n    }\n    /**\n     * called to set a 1 second timeout on the specified sequence\n     *\n     * this is so after each key press in the sequence you have 1 second\n     * to press the next key before you have to start over\n     *\n     * @returns void\n     */\n\n\n    function _resetSequenceTimer() {\n      clearTimeout(_resetTimer);\n      _resetTimer = setTimeout(_resetSequences, 1000);\n    }\n    /**\n     * binds a key sequence to an event\n     *\n     * @param {string} combo - combo specified in bind call\n     * @param {Array} keys\n     * @param {Function} callback\n     * @param {string=} action\n     * @returns void\n     */\n\n\n    function _bindSequence(combo, keys, callback, action) {\n      // start off by adding a sequence level record for this combination\n      // and setting the level to 0\n      _sequenceLevels[combo] = 0;\n      /**\n       * callback to increase the sequence level for this sequence and reset\n       * all other sequences that were active\n       *\n       * @param {string} nextAction\n       * @returns {Function}\n       */\n\n      function _increaseSequence(nextAction) {\n        return function () {\n          _nextExpectedAction = nextAction;\n          ++_sequenceLevels[combo];\n\n          _resetSequenceTimer();\n        };\n      }\n      /**\n       * wraps the specified callback inside of another function in order\n       * to reset all sequence counters as soon as this sequence is done\n       *\n       * @param {Event} e\n       * @returns void\n       */\n\n\n      function _callbackAndReset(e) {\n        _fireCallback(callback, e, combo); // we should ignore the next key up if the action is key down\n        // or keypress.  this is so if you finish a sequence and\n        // release the key the final key will not trigger a keyup\n\n\n        if (action !== 'keyup') {\n          _ignoreNextKeyup = _characterFromEvent(e);\n        } // weird race condition if a sequence ends with the key\n        // another sequence begins with\n\n\n        setTimeout(_resetSequences, 10);\n      } // loop through keys one at a time and bind the appropriate callback\n      // function.  for any key leading up to the final one it should\n      // increase the sequence. after the final, it should reset all sequences\n      //\n      // if an action is specified in the original bind call then that will\n      // be used throughout.  otherwise we will pass the action that the\n      // next key in the sequence should match.  this allows a sequence\n      // to mix and match keypress and keydown events depending on which\n      // ones are better suited to the key provided\n\n\n      for (var i = 0; i < keys.length; ++i) {\n        var isFinal = i + 1 === keys.length;\n        var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n\n        _bindSingle(keys[i], wrappedCallback, action, combo, i);\n      }\n    }\n    /**\n     * binds a single keyboard combination\n     *\n     * @param {string} combination\n     * @param {Function} callback\n     * @param {string=} action\n     * @param {string=} sequenceName - name of sequence if part of sequence\n     * @param {number=} level - what part of the sequence the command is\n     * @returns void\n     */\n\n\n    function _bindSingle(combination, callback, action, sequenceName, level) {\n      // store a direct mapped reference for use with Mousetrap.trigger\n      self._directMap[combination + ':' + action] = callback; // make sure multiple spaces in a row become a single space\n\n      combination = combination.replace(/\\s+/g, ' ');\n      var sequence = combination.split(' ');\n      var info; // if this pattern is a sequence of keys then run through this method\n      // to reprocess each pattern one key at a time\n\n      if (sequence.length > 1) {\n        _bindSequence(combination, sequence, callback, action);\n\n        return;\n      }\n\n      info = _getKeyInfo(combination, action); // make sure to initialize array if this is the first time\n      // a callback is added for this key\n\n      self._callbacks[info.key] = self._callbacks[info.key] || []; // remove an existing match if there is one\n\n      _getMatches(info.key, info.modifiers, {\n        type: info.action\n      }, sequenceName, combination, level); // add this call back to the array\n      // if it is a sequence put it at the beginning\n      // if not put it at the end\n      //\n      // this is important because the way these are processed expects\n      // the sequence ones to come first\n\n\n      self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n        callback: callback,\n        modifiers: info.modifiers,\n        action: info.action,\n        seq: sequenceName,\n        level: level,\n        combo: combination\n      });\n    }\n    /**\n     * binds multiple combinations to the same callback\n     *\n     * @param {Array} combinations\n     * @param {Function} callback\n     * @param {string|undefined} action\n     * @returns void\n     */\n\n\n    self._bindMultiple = function (combinations, callback, action) {\n      for (var i = 0; i < combinations.length; ++i) {\n        _bindSingle(combinations[i], callback, action);\n      }\n    }; // start!\n\n\n    _addEvent(targetElement, 'keypress', _handleKeyEvent);\n\n    _addEvent(targetElement, 'keydown', _handleKeyEvent);\n\n    _addEvent(targetElement, 'keyup', _handleKeyEvent);\n  }\n  /**\n   * binds an event to mousetrap\n   *\n   * can be a single key, a combination of keys separated with +,\n   * an array of keys, or a sequence of keys separated by spaces\n   *\n   * be sure to list the modifier keys first to make sure that the\n   * correct key ends up getting bound (the last key in the pattern)\n   *\n   * @param {string|Array} keys\n   * @param {Function} callback\n   * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n   * @returns void\n   */\n\n\n  Mousetrap.prototype.bind = function (keys, callback, action) {\n    var self = this;\n    keys = keys instanceof Array ? keys : [keys];\n\n    self._bindMultiple.call(self, keys, callback, action);\n\n    return self;\n  };\n  /**\n   * unbinds an event to mousetrap\n   *\n   * the unbinding sets the callback function of the specified key combo\n   * to an empty function and deletes the corresponding key in the\n   * _directMap dict.\n   *\n   * TODO: actually remove this from the _callbacks dictionary instead\n   * of binding an empty function\n   *\n   * the keycombo+action has to be exactly the same as\n   * it was defined in the bind method\n   *\n   * @param {string|Array} keys\n   * @param {string} action\n   * @returns void\n   */\n\n\n  Mousetrap.prototype.unbind = function (keys, action) {\n    var self = this;\n    return self.bind.call(self, keys, function () {}, action);\n  };\n  /**\n   * triggers an event that has already been bound\n   *\n   * @param {string} keys\n   * @param {string=} action\n   * @returns void\n   */\n\n\n  Mousetrap.prototype.trigger = function (keys, action) {\n    var self = this;\n\n    if (self._directMap[keys + ':' + action]) {\n      self._directMap[keys + ':' + action]({}, keys);\n    }\n\n    return self;\n  };\n  /**\n   * resets the library back to its initial state.  this is useful\n   * if you want to clear out the current keyboard shortcuts and bind\n   * new ones - for example if you switch to another page\n   *\n   * @returns void\n   */\n\n\n  Mousetrap.prototype.reset = function () {\n    var self = this;\n    self._callbacks = {};\n    self._directMap = {};\n    return self;\n  };\n  /**\n   * should we stop this event before firing off callbacks\n   *\n   * @param {Event} e\n   * @param {Element} element\n   * @return {boolean}\n   */\n\n\n  Mousetrap.prototype.stopCallback = function (e, element) {\n    var self = this; // if the element has the class \"mousetrap\" then no need to stop\n\n    if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n      return false;\n    }\n\n    if (_belongsTo(element, self.target)) {\n      return false;\n    } // stop for input, select, and textarea\n\n\n    return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n  };\n  /**\n   * exposes _handleKey publicly so it can be overwritten by extensions\n   */\n\n\n  Mousetrap.prototype.handleKey = function () {\n    var self = this;\n    return self._handleKey.apply(self, arguments);\n  };\n  /**\n   * allow custom key mappings\n   */\n\n\n  Mousetrap.addKeycodes = function (object) {\n    for (var key in object) {\n      if (object.hasOwnProperty(key)) {\n        _MAP[key] = object[key];\n      }\n    }\n\n    _REVERSE_MAP = null;\n  };\n  /**\n   * Init the global mousetrap functions\n   *\n   * This method is needed to allow the global mousetrap functions to work\n   * now that mousetrap is a constructor function.\n   */\n\n\n  Mousetrap.init = function () {\n    var documentMousetrap = Mousetrap(document);\n\n    for (var method in documentMousetrap) {\n      if (method.charAt(0) !== '_') {\n        Mousetrap[method] = function (method) {\n          return function () {\n            return documentMousetrap[method].apply(documentMousetrap, arguments);\n          };\n        }(method);\n      }\n    }\n  };\n\n  Mousetrap.init(); // expose mousetrap to the global object\n\n  window.Mousetrap = Mousetrap; // expose as a common js module\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Mousetrap;\n  } // expose mousetrap as an AMD module\n\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return Mousetrap;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n})(typeof window !== 'undefined' ? window : null, typeof window !== 'undefined' ? document : null);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mousetrap/mousetrap.js\n");

/***/ })

}]);
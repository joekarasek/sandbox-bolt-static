(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~bolt-copy-to-clipboard"],{

/***/ "./node_modules/@bolt/components-copy-to-clipboard/src/copy-to-clipboard.standalone.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@bolt/components-copy-to-clipboard/src/copy-to-clipboard.standalone.js ***!
  \*********************************************************************************************/
/*! exports provided: BoltCopyToClipboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoltCopyToClipboard\", function() { return BoltCopyToClipboard; });\n/* harmony import */ var clipboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clipboard */ \"./node_modules/clipboard/dist/clipboard.js\");\n/* harmony import */ var clipboard__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(clipboard__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _bolt_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bolt/core/utils */ \"./node_modules/@bolt/core/utils/index.js\");\n/* harmony import */ var _bolt_core_renderers_renderer_lit_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bolt/core/renderers/renderer-lit-html */ \"./node_modules/@bolt/core/renderers/renderer-lit-html.js\");\nvar _class, _class2, _temp;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      \", \"\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\nvar BoltCopyToClipboard = Object(_bolt_core_utils__WEBPACK_IMPORTED_MODULE_1__[\"define\"])(_class = (_temp = _class2 =\n/*#__PURE__*/\nfunction (_withLitHtml) {\n  _inherits(BoltCopyToClipboard, _withLitHtml);\n\n  function BoltCopyToClipboard(self) {\n    var _this;\n\n    _classCallCheck(this, BoltCopyToClipboard);\n\n    self = _this = _possibleConstructorReturn(this, _getPrototypeOf(BoltCopyToClipboard).call(this, self));\n    _this.useShadow = false;\n    return _possibleConstructorReturn(_this, self);\n  }\n\n  _createClass(BoltCopyToClipboard, [{\n    key: \"connecting\",\n    value: function connecting() {\n      var _this2 = this;\n\n      this.copyTrigger = this.querySelector('[data-clipboard-text]');\n      this.parentElem = this.querySelector('.js-bolt-copy-to-clipboard');\n      this.clipboardInstance = new clipboard__WEBPACK_IMPORTED_MODULE_0___default.a(this.copyTrigger);\n      this.clipboardInstance.on('success', function () {\n        // Copying is already successful at this point.  Everything from here on is UX flair.\n        // Show the \"in progress\" status.\n        _this2.parentElem.classList.add('is-animating'); // Show the \"success\" status.\n\n\n        setTimeout(function () {\n          _this2.parentElem.classList.add('is-successful'); // Reset so the link can be used again without refreshing the page.\n\n\n          setTimeout(function () {\n            _this2.parentElem.classList.remove('is-successful');\n\n            _this2.parentElem.classList.remove('is-animating');\n          }, 3000);\n        }, 1000);\n      });\n    }\n  }, {\n    key: \"disconnecting\",\n    value: function disconnecting() {\n      this.clipboardInstance.destroy();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return Object(_bolt_core_renderers_renderer_lit_html__WEBPACK_IMPORTED_MODULE_2__[\"html\"])(_templateObject(), this.slot('default'));\n    }\n  }]);\n\n  return BoltCopyToClipboard;\n}(Object(_bolt_core_renderers_renderer_lit_html__WEBPACK_IMPORTED_MODULE_2__[\"withLitHtml\"])()), _class2.is = 'bolt-copy-to-clipboard', _temp)) || _class;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJvbHQvY29tcG9uZW50cy1jb3B5LXRvLWNsaXBib2FyZC9zcmMvY29weS10by1jbGlwYm9hcmQuc3RhbmRhbG9uZS5qcz84M2E5Il0sIm5hbWVzIjpbIkJvbHRDb3B5VG9DbGlwYm9hcmQiLCJkZWZpbmUiLCJzZWxmIiwidXNlU2hhZG93IiwiY29weVRyaWdnZXIiLCJxdWVyeVNlbGVjdG9yIiwicGFyZW50RWxlbSIsImNsaXBib2FyZEluc3RhbmNlIiwiQ2xpcGJvYXJkSlMiLCJvbiIsImNsYXNzTGlzdCIsImFkZCIsInNldFRpbWVvdXQiLCJyZW1vdmUiLCJkZXN0cm95IiwiaHRtbCIsInNsb3QiLCJ3aXRoTGl0SHRtbCIsImlzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQTs7SUFHTUEsbUIsR0FETEMsK0Q7Ozs7O0FBSUMsK0JBQVlDLElBQVosRUFBa0I7QUFBQTs7QUFBQTs7QUFDaEJBLFFBQUksNEZBQVNBLElBQVQsRUFBSjtBQUNBLFVBQUtDLFNBQUwsR0FBaUIsS0FBakI7QUFDQSw2Q0FBT0QsSUFBUDtBQUNEOzs7O2lDQUVZO0FBQUE7O0FBQ1gsV0FBS0UsV0FBTCxHQUFtQixLQUFLQyxhQUFMLENBQW1CLHVCQUFuQixDQUFuQjtBQUNBLFdBQUtDLFVBQUwsR0FBa0IsS0FBS0QsYUFBTCxDQUFtQiw0QkFBbkIsQ0FBbEI7QUFFQSxXQUFLRSxpQkFBTCxHQUF5QixJQUFJQyxnREFBSixDQUFnQixLQUFLSixXQUFyQixDQUF6QjtBQUVBLFdBQUtHLGlCQUFMLENBQXVCRSxFQUF2QixDQUEwQixTQUExQixFQUFxQyxZQUFNO0FBQ3pDO0FBRUE7QUFDQSxjQUFJLENBQUNILFVBQUwsQ0FBZ0JJLFNBQWhCLENBQTBCQyxHQUExQixDQUE4QixjQUE5QixFQUp5QyxDQU16Qzs7O0FBQ0FDLGtCQUFVLENBQUMsWUFBTTtBQUNmLGdCQUFJLENBQUNOLFVBQUwsQ0FBZ0JJLFNBQWhCLENBQTBCQyxHQUExQixDQUE4QixlQUE5QixFQURlLENBR2Y7OztBQUNBQyxvQkFBVSxDQUFDLFlBQU07QUFDZixrQkFBSSxDQUFDTixVQUFMLENBQWdCSSxTQUFoQixDQUEwQkcsTUFBMUIsQ0FBaUMsZUFBakM7O0FBQ0Esa0JBQUksQ0FBQ1AsVUFBTCxDQUFnQkksU0FBaEIsQ0FBMEJHLE1BQTFCLENBQWlDLGNBQWpDO0FBQ0QsV0FIUyxFQUdQLElBSE8sQ0FBVjtBQUlELFNBUlMsRUFRUCxJQVJPLENBQVY7QUFTRCxPQWhCRDtBQWlCRDs7O29DQUVlO0FBQ2QsV0FBS04saUJBQUwsQ0FBdUJPLE9BQXZCO0FBQ0Q7Ozs2QkFFUTtBQUNQLGFBQU9DLG1GQUFQLG9CQUNJLEtBQUtDLElBQUwsQ0FBVSxTQUFWLENBREo7QUFHRDs7OztFQTFDK0JDLDBGQUFXLEUsV0FDcENDLEUsR0FBSyx3QiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AYm9sdC9jb21wb25lbnRzLWNvcHktdG8tY2xpcGJvYXJkL3NyYy9jb3B5LXRvLWNsaXBib2FyZC5zdGFuZGFsb25lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENsaXBib2FyZEpTIGZyb20gJ2NsaXBib2FyZCc7XG5cbmltcG9ydCB7IHByb3BzLCBkZWZpbmUgfSBmcm9tICdAYm9sdC9jb3JlL3V0aWxzJztcbmltcG9ydCB7IHdpdGhMaXRIdG1sLCBodG1sIH0gZnJvbSAnQGJvbHQvY29yZS9yZW5kZXJlcnMvcmVuZGVyZXItbGl0LWh0bWwnO1xuXG5AZGVmaW5lXG5jbGFzcyBCb2x0Q29weVRvQ2xpcGJvYXJkIGV4dGVuZHMgd2l0aExpdEh0bWwoKSB7XG4gIHN0YXRpYyBpcyA9ICdib2x0LWNvcHktdG8tY2xpcGJvYXJkJztcblxuICBjb25zdHJ1Y3RvcihzZWxmKSB7XG4gICAgc2VsZiA9IHN1cGVyKHNlbGYpO1xuICAgIHRoaXMudXNlU2hhZG93ID0gZmFsc2U7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cblxuICBjb25uZWN0aW5nKCkge1xuICAgIHRoaXMuY29weVRyaWdnZXIgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNsaXBib2FyZC10ZXh0XScpO1xuICAgIHRoaXMucGFyZW50RWxlbSA9IHRoaXMucXVlcnlTZWxlY3RvcignLmpzLWJvbHQtY29weS10by1jbGlwYm9hcmQnKTtcblxuICAgIHRoaXMuY2xpcGJvYXJkSW5zdGFuY2UgPSBuZXcgQ2xpcGJvYXJkSlModGhpcy5jb3B5VHJpZ2dlcik7XG5cbiAgICB0aGlzLmNsaXBib2FyZEluc3RhbmNlLm9uKCdzdWNjZXNzJywgKCkgPT4ge1xuICAgICAgLy8gQ29weWluZyBpcyBhbHJlYWR5IHN1Y2Nlc3NmdWwgYXQgdGhpcyBwb2ludC4gIEV2ZXJ5dGhpbmcgZnJvbSBoZXJlIG9uIGlzIFVYIGZsYWlyLlxuXG4gICAgICAvLyBTaG93IHRoZSBcImluIHByb2dyZXNzXCIgc3RhdHVzLlxuICAgICAgdGhpcy5wYXJlbnRFbGVtLmNsYXNzTGlzdC5hZGQoJ2lzLWFuaW1hdGluZycpO1xuXG4gICAgICAvLyBTaG93IHRoZSBcInN1Y2Nlc3NcIiBzdGF0dXMuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtLmNsYXNzTGlzdC5hZGQoJ2lzLXN1Y2Nlc3NmdWwnKTtcblxuICAgICAgICAvLyBSZXNldCBzbyB0aGUgbGluayBjYW4gYmUgdXNlZCBhZ2FpbiB3aXRob3V0IHJlZnJlc2hpbmcgdGhlIHBhZ2UuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMucGFyZW50RWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1zdWNjZXNzZnVsJyk7XG4gICAgICAgICAgdGhpcy5wYXJlbnRFbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFuaW1hdGluZycpO1xuICAgICAgICB9LCAzMDAwKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH0pO1xuICB9XG5cbiAgZGlzY29ubmVjdGluZygpIHtcbiAgICB0aGlzLmNsaXBib2FyZEluc3RhbmNlLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgICR7dGhpcy5zbG90KCdkZWZhdWx0Jyl9XG4gICAgYDtcbiAgfVxufVxuXG5leHBvcnQgeyBCb2x0Q29weVRvQ2xpcGJvYXJkIH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@bolt/components-copy-to-clipboard/src/copy-to-clipboard.standalone.js\n");

/***/ }),

/***/ "./node_modules/clipboard/dist/clipboard.js":
/*!**************************************************!*\
  !*** ./node_modules/clipboard/dist/clipboard.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\n/*!\n * clipboard.js v2.0.4\n * https://zenorocha.github.io/clipboard.js\n * \n * Licensed MIT © Zeno Rocha\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? undefined : _typeof2(exports)) === 'object' && ( false ? undefined : _typeof2(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && _typeof2(value) === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\n          __webpack_require__.d(ns, key, function (key) {\n            return value[key];\n          }.bind(null, key));\n        }\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n        return _typeof2(obj);\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n      };\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      var _clipboardAction = __webpack_require__(1);\n\n      var _clipboardAction2 = _interopRequireDefault(_clipboardAction);\n\n      var _tinyEmitter = __webpack_require__(3);\n\n      var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);\n\n      var _goodListener = __webpack_require__(4);\n\n      var _goodListener2 = _interopRequireDefault(_goodListener);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (_typeof2(call) === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof2(superClass));\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n      /**\n       * Base class which takes one or more elements, adds event listeners to them,\n       * and instantiates a new `ClipboardAction` on each click.\n       */\n\n\n      var Clipboard = function (_Emitter) {\n        _inherits(Clipboard, _Emitter);\n        /**\n         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n         * @param {Object} options\n         */\n\n\n        function Clipboard(trigger, options) {\n          _classCallCheck(this, Clipboard);\n\n          var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));\n\n          _this.resolveOptions(options);\n\n          _this.listenClick(trigger);\n\n          return _this;\n        }\n        /**\n         * Defines if attributes would be resolved using internal setter functions\n         * or custom functions that were passed in the constructor.\n         * @param {Object} options\n         */\n\n\n        _createClass(Clipboard, [{\n          key: 'resolveOptions',\n          value: function resolveOptions() {\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            this.action = typeof options.action === 'function' ? options.action : this.defaultAction;\n            this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;\n            this.text = typeof options.text === 'function' ? options.text : this.defaultText;\n            this.container = _typeof(options.container) === 'object' ? options.container : document.body;\n          }\n          /**\n           * Adds a click event listener to the passed trigger.\n           * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n           */\n\n        }, {\n          key: 'listenClick',\n          value: function listenClick(trigger) {\n            var _this2 = this;\n\n            this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {\n              return _this2.onClick(e);\n            });\n          }\n          /**\n           * Defines a new `ClipboardAction` on each click event.\n           * @param {Event} e\n           */\n\n        }, {\n          key: 'onClick',\n          value: function onClick(e) {\n            var trigger = e.delegateTarget || e.currentTarget;\n\n            if (this.clipboardAction) {\n              this.clipboardAction = null;\n            }\n\n            this.clipboardAction = new _clipboardAction2.default({\n              action: this.action(trigger),\n              target: this.target(trigger),\n              text: this.text(trigger),\n              container: this.container,\n              trigger: trigger,\n              emitter: this\n            });\n          }\n          /**\n           * Default `action` lookup function.\n           * @param {Element} trigger\n           */\n\n        }, {\n          key: 'defaultAction',\n          value: function defaultAction(trigger) {\n            return getAttributeValue('action', trigger);\n          }\n          /**\n           * Default `target` lookup function.\n           * @param {Element} trigger\n           */\n\n        }, {\n          key: 'defaultTarget',\n          value: function defaultTarget(trigger) {\n            var selector = getAttributeValue('target', trigger);\n\n            if (selector) {\n              return document.querySelector(selector);\n            }\n          }\n          /**\n           * Returns the support of the given action, or all actions if no action is\n           * given.\n           * @param {String} [action]\n           */\n\n        }, {\n          key: 'defaultText',\n\n          /**\n           * Default `text` lookup function.\n           * @param {Element} trigger\n           */\n          value: function defaultText(trigger) {\n            return getAttributeValue('text', trigger);\n          }\n          /**\n           * Destroy lifecycle.\n           */\n\n        }, {\n          key: 'destroy',\n          value: function destroy() {\n            this.listener.destroy();\n\n            if (this.clipboardAction) {\n              this.clipboardAction.destroy();\n              this.clipboardAction = null;\n            }\n          }\n        }], [{\n          key: 'isSupported',\n          value: function isSupported() {\n            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];\n            var actions = typeof action === 'string' ? [action] : action;\n            var support = !!document.queryCommandSupported;\n            actions.forEach(function (action) {\n              support = support && !!document.queryCommandSupported(action);\n            });\n            return support;\n          }\n        }]);\n\n        return Clipboard;\n      }(_tinyEmitter2.default);\n      /**\n       * Helper function to retrieve attribute value.\n       * @param {String} suffix\n       * @param {Element} element\n       */\n\n\n      function getAttributeValue(suffix, element) {\n        var attribute = 'data-clipboard-' + suffix;\n\n        if (!element.hasAttribute(attribute)) {\n          return;\n        }\n\n        return element.getAttribute(attribute);\n      }\n\n      module.exports = Clipboard;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n        return _typeof2(obj);\n      } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n      };\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      var _select = __webpack_require__(2);\n\n      var _select2 = _interopRequireDefault(_select);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /**\n       * Inner class which performs selection from either `text` or `target`\n       * properties and then executes copy or cut operations.\n       */\n\n\n      var ClipboardAction = function () {\n        /**\n         * @param {Object} options\n         */\n        function ClipboardAction(options) {\n          _classCallCheck(this, ClipboardAction);\n\n          this.resolveOptions(options);\n          this.initSelection();\n        }\n        /**\n         * Defines base properties passed from constructor.\n         * @param {Object} options\n         */\n\n\n        _createClass(ClipboardAction, [{\n          key: 'resolveOptions',\n          value: function resolveOptions() {\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            this.action = options.action;\n            this.container = options.container;\n            this.emitter = options.emitter;\n            this.target = options.target;\n            this.text = options.text;\n            this.trigger = options.trigger;\n            this.selectedText = '';\n          }\n          /**\n           * Decides which selection strategy is going to be applied based\n           * on the existence of `text` and `target` properties.\n           */\n\n        }, {\n          key: 'initSelection',\n          value: function initSelection() {\n            if (this.text) {\n              this.selectFake();\n            } else if (this.target) {\n              this.selectTarget();\n            }\n          }\n          /**\n           * Creates a fake textarea element, sets its value from `text` property,\n           * and makes a selection on it.\n           */\n\n        }, {\n          key: 'selectFake',\n          value: function selectFake() {\n            var _this = this;\n\n            var isRTL = document.documentElement.getAttribute('dir') == 'rtl';\n            this.removeFake();\n\n            this.fakeHandlerCallback = function () {\n              return _this.removeFake();\n            };\n\n            this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;\n            this.fakeElem = document.createElement('textarea'); // Prevent zooming on iOS\n\n            this.fakeElem.style.fontSize = '12pt'; // Reset box model\n\n            this.fakeElem.style.border = '0';\n            this.fakeElem.style.padding = '0';\n            this.fakeElem.style.margin = '0'; // Move element out of screen horizontally\n\n            this.fakeElem.style.position = 'absolute';\n            this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically\n\n            var yPosition = window.pageYOffset || document.documentElement.scrollTop;\n            this.fakeElem.style.top = yPosition + 'px';\n            this.fakeElem.setAttribute('readonly', '');\n            this.fakeElem.value = this.text;\n            this.container.appendChild(this.fakeElem);\n            this.selectedText = (0, _select2.default)(this.fakeElem);\n            this.copyText();\n          }\n          /**\n           * Only removes the fake element after another click event, that way\n           * a user can hit `Ctrl+C` to copy because selection still exists.\n           */\n\n        }, {\n          key: 'removeFake',\n          value: function removeFake() {\n            if (this.fakeHandler) {\n              this.container.removeEventListener('click', this.fakeHandlerCallback);\n              this.fakeHandler = null;\n              this.fakeHandlerCallback = null;\n            }\n\n            if (this.fakeElem) {\n              this.container.removeChild(this.fakeElem);\n              this.fakeElem = null;\n            }\n          }\n          /**\n           * Selects the content from element passed on `target` property.\n           */\n\n        }, {\n          key: 'selectTarget',\n          value: function selectTarget() {\n            this.selectedText = (0, _select2.default)(this.target);\n            this.copyText();\n          }\n          /**\n           * Executes the copy operation based on the current selection.\n           */\n\n        }, {\n          key: 'copyText',\n          value: function copyText() {\n            var succeeded = void 0;\n\n            try {\n              succeeded = document.execCommand(this.action);\n            } catch (err) {\n              succeeded = false;\n            }\n\n            this.handleResult(succeeded);\n          }\n          /**\n           * Fires an event based on the copy operation result.\n           * @param {Boolean} succeeded\n           */\n\n        }, {\n          key: 'handleResult',\n          value: function handleResult(succeeded) {\n            this.emitter.emit(succeeded ? 'success' : 'error', {\n              action: this.action,\n              text: this.selectedText,\n              trigger: this.trigger,\n              clearSelection: this.clearSelection.bind(this)\n            });\n          }\n          /**\n           * Moves focus away from `target` and back to the trigger, removes current selection.\n           */\n\n        }, {\n          key: 'clearSelection',\n          value: function clearSelection() {\n            if (this.trigger) {\n              this.trigger.focus();\n            }\n\n            window.getSelection().removeAllRanges();\n          }\n          /**\n           * Sets the `action` to be performed which can be either 'copy' or 'cut'.\n           * @param {String} action\n           */\n\n        }, {\n          key: 'destroy',\n\n          /**\n           * Destroy lifecycle.\n           */\n          value: function destroy() {\n            this.removeFake();\n          }\n        }, {\n          key: 'action',\n          set: function set() {\n            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';\n            this._action = action;\n\n            if (this._action !== 'copy' && this._action !== 'cut') {\n              throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\n            }\n          }\n          /**\n           * Gets the `action` property.\n           * @return {String}\n           */\n          ,\n          get: function get() {\n            return this._action;\n          }\n          /**\n           * Sets the `target` property using an element\n           * that will be have its content copied.\n           * @param {Element} target\n           */\n\n        }, {\n          key: 'target',\n          set: function set(target) {\n            if (target !== undefined) {\n              if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {\n                if (this.action === 'copy' && target.hasAttribute('disabled')) {\n                  throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                }\n\n                if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {\n                  throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');\n                }\n\n                this._target = target;\n              } else {\n                throw new Error('Invalid \"target\" value, use a valid Element');\n              }\n            }\n          }\n          /**\n           * Gets the `target` property.\n           * @return {String|HTMLElement}\n           */\n          ,\n          get: function get() {\n            return this._target;\n          }\n        }]);\n\n        return ClipboardAction;\n      }();\n\n      module.exports = ClipboardAction;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      function select(element) {\n        var selectedText;\n\n        if (element.nodeName === 'SELECT') {\n          element.focus();\n          selectedText = element.value;\n        } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n          var isReadOnly = element.hasAttribute('readonly');\n\n          if (!isReadOnly) {\n            element.setAttribute('readonly', '');\n          }\n\n          element.select();\n          element.setSelectionRange(0, element.value.length);\n\n          if (!isReadOnly) {\n            element.removeAttribute('readonly');\n          }\n\n          selectedText = element.value;\n        } else {\n          if (element.hasAttribute('contenteditable')) {\n            element.focus();\n          }\n\n          var selection = window.getSelection();\n          var range = document.createRange();\n          range.selectNodeContents(element);\n          selection.removeAllRanges();\n          selection.addRange(range);\n          selectedText = selection.toString();\n        }\n\n        return selectedText;\n      }\n\n      module.exports = select;\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports) {\n      function E() {// Keep this empty so it's easier to inherit from\n        // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n      }\n\n      E.prototype = {\n        on: function on(name, callback, ctx) {\n          var e = this.e || (this.e = {});\n          (e[name] || (e[name] = [])).push({\n            fn: callback,\n            ctx: ctx\n          });\n          return this;\n        },\n        once: function once(name, callback, ctx) {\n          var self = this;\n\n          function listener() {\n            self.off(name, listener);\n            callback.apply(ctx, arguments);\n          }\n\n          ;\n          listener._ = callback;\n          return this.on(name, listener, ctx);\n        },\n        emit: function emit(name) {\n          var data = [].slice.call(arguments, 1);\n          var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n          var i = 0;\n          var len = evtArr.length;\n\n          for (i; i < len; i++) {\n            evtArr[i].fn.apply(evtArr[i].ctx, data);\n          }\n\n          return this;\n        },\n        off: function off(name, callback) {\n          var e = this.e || (this.e = {});\n          var evts = e[name];\n          var liveEvents = [];\n\n          if (evts && callback) {\n            for (var i = 0, len = evts.length; i < len; i++) {\n              if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);\n            }\n          } // Remove event from queue to prevent memory leak\n          // Suggested by https://github.com/lazd\n          // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n\n          liveEvents.length ? e[name] = liveEvents : delete e[name];\n          return this;\n        }\n      };\n      module.exports = E;\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var is = __webpack_require__(5);\n\n      var delegate = __webpack_require__(6);\n      /**\n       * Validates all params and calls the right\n       * listener function based on its target type.\n       *\n       * @param {String|HTMLElement|HTMLCollection|NodeList} target\n       * @param {String} type\n       * @param {Function} callback\n       * @return {Object}\n       */\n\n\n      function listen(target, type, callback) {\n        if (!target && !type && !callback) {\n          throw new Error('Missing required arguments');\n        }\n\n        if (!is.string(type)) {\n          throw new TypeError('Second argument must be a String');\n        }\n\n        if (!is.fn(callback)) {\n          throw new TypeError('Third argument must be a Function');\n        }\n\n        if (is.node(target)) {\n          return listenNode(target, type, callback);\n        } else if (is.nodeList(target)) {\n          return listenNodeList(target, type, callback);\n        } else if (is.string(target)) {\n          return listenSelector(target, type, callback);\n        } else {\n          throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\n        }\n      }\n      /**\n       * Adds an event listener to a HTML element\n       * and returns a remove listener function.\n       *\n       * @param {HTMLElement} node\n       * @param {String} type\n       * @param {Function} callback\n       * @return {Object}\n       */\n\n\n      function listenNode(node, type, callback) {\n        node.addEventListener(type, callback);\n        return {\n          destroy: function destroy() {\n            node.removeEventListener(type, callback);\n          }\n        };\n      }\n      /**\n       * Add an event listener to a list of HTML elements\n       * and returns a remove listener function.\n       *\n       * @param {NodeList|HTMLCollection} nodeList\n       * @param {String} type\n       * @param {Function} callback\n       * @return {Object}\n       */\n\n\n      function listenNodeList(nodeList, type, callback) {\n        Array.prototype.forEach.call(nodeList, function (node) {\n          node.addEventListener(type, callback);\n        });\n        return {\n          destroy: function destroy() {\n            Array.prototype.forEach.call(nodeList, function (node) {\n              node.removeEventListener(type, callback);\n            });\n          }\n        };\n      }\n      /**\n       * Add an event listener to a selector\n       * and returns a remove listener function.\n       *\n       * @param {String} selector\n       * @param {String} type\n       * @param {Function} callback\n       * @return {Object}\n       */\n\n\n      function listenSelector(selector, type, callback) {\n        return delegate(document.body, selector, type, callback);\n      }\n\n      module.exports = listen;\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports) {\n      /**\n       * Check if argument is a HTML element.\n       *\n       * @param {Object} value\n       * @return {Boolean}\n       */\n      exports.node = function (value) {\n        return value !== undefined && value instanceof HTMLElement && value.nodeType === 1;\n      };\n      /**\n       * Check if argument is a list of HTML elements.\n       *\n       * @param {Object} value\n       * @return {Boolean}\n       */\n\n\n      exports.nodeList = function (value) {\n        var type = Object.prototype.toString.call(value);\n        return value !== undefined && (type === '[object NodeList]' || type === '[object HTMLCollection]') && 'length' in value && (value.length === 0 || exports.node(value[0]));\n      };\n      /**\n       * Check if argument is a string.\n       *\n       * @param {Object} value\n       * @return {Boolean}\n       */\n\n\n      exports.string = function (value) {\n        return typeof value === 'string' || value instanceof String;\n      };\n      /**\n       * Check if argument is a function.\n       *\n       * @param {Object} value\n       * @return {Boolean}\n       */\n\n\n      exports.fn = function (value) {\n        var type = Object.prototype.toString.call(value);\n        return type === '[object Function]';\n      };\n      /***/\n\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var closest = __webpack_require__(7);\n      /**\n       * Delegates event to a selector.\n       *\n       * @param {Element} element\n       * @param {String} selector\n       * @param {String} type\n       * @param {Function} callback\n       * @param {Boolean} useCapture\n       * @return {Object}\n       */\n\n\n      function _delegate(element, selector, type, callback, useCapture) {\n        var listenerFn = listener.apply(this, arguments);\n        element.addEventListener(type, listenerFn, useCapture);\n        return {\n          destroy: function destroy() {\n            element.removeEventListener(type, listenerFn, useCapture);\n          }\n        };\n      }\n      /**\n       * Delegates event to a selector.\n       *\n       * @param {Element|String|Array} [elements]\n       * @param {String} selector\n       * @param {String} type\n       * @param {Function} callback\n       * @param {Boolean} useCapture\n       * @return {Object}\n       */\n\n\n      function delegate(elements, selector, type, callback, useCapture) {\n        // Handle the regular Element usage\n        if (typeof elements.addEventListener === 'function') {\n          return _delegate.apply(null, arguments);\n        } // Handle Element-less usage, it defaults to global delegation\n\n\n        if (typeof type === 'function') {\n          // Use `document` as the first parameter, then apply arguments\n          // This is a short way to .unshift `arguments` without running into deoptimizations\n          return _delegate.bind(null, document).apply(null, arguments);\n        } // Handle Selector-based usage\n\n\n        if (typeof elements === 'string') {\n          elements = document.querySelectorAll(elements);\n        } // Handle Array-like based usage\n\n\n        return Array.prototype.map.call(elements, function (element) {\n          return _delegate(element, selector, type, callback, useCapture);\n        });\n      }\n      /**\n       * Finds closest match and invokes callback.\n       *\n       * @param {Element} element\n       * @param {String} selector\n       * @param {String} type\n       * @param {Function} callback\n       * @return {Function}\n       */\n\n\n      function listener(element, selector, type, callback) {\n        return function (e) {\n          e.delegateTarget = closest(e.target, selector);\n\n          if (e.delegateTarget) {\n            callback.call(element, e);\n          }\n        };\n      }\n\n      module.exports = delegate;\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports) {\n      var DOCUMENT_NODE_TYPE = 9;\n      /**\n       * A polyfill for Element.matches()\n       */\n\n      if (typeof Element !== 'undefined' && !Element.prototype.matches) {\n        var proto = Element.prototype;\n        proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;\n      }\n      /**\n       * Finds the closest parent that matches a selector.\n       *\n       * @param {Element} element\n       * @param {String} selector\n       * @return {Function}\n       */\n\n\n      function closest(element, selector) {\n        while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {\n          if (typeof element.matches === 'function' && element.matches(selector)) {\n            return element;\n          }\n\n          element = element.parentNode;\n        }\n      }\n\n      module.exports = closest;\n      /***/\n    }])\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/clipboard/dist/clipboard.js\n");

/***/ })

}]);